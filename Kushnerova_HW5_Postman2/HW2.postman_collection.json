{
	"info": {
		"_postman_id": "882ef46c-a9ee-4bc6-993c-680cc517a5d9",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 . first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3.Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Alex\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"20\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request\r",
							"var req = request.data;     //проверить реквест в консоли  console.log(req) \r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response=request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age response=request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response = request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary_1\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();    //проверить реквест в консоли   console.log(req) \r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response=request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age response=request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response=request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name=Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age=4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=20&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject(); \r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response=request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age response=request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary0\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary1\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary2\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (var i of resp.salary) {\r",
							"    console.log(i)\r",
							" }\r",
							"//Цикл for...of предназначен для перебора наборов данных. Например, строка представляет фактически набор символов. И мы можем перебрать ее с помощью данного цикла"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=20&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5. user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"respons have start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"respons have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"respons have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"respons have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр person\r",
							"pm.test(\"respons have person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"//13. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary=salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"//14. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"//16.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_years=salary*3.3\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"//18.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name=salary\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"//19. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"//20. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"//21. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//1.вариант выводит ключи\r",
							"for (var i in resp.person) {\r",
							"    console.log(i)\r",
							"};\r",
							"//2.вариант выводит значения\r",
							"for (var i in resp.person){\r",
							"    console.log(resp.person[i]);\r",
							"}\r",
							"//3. вариант ключи+значения\r",
							"for (var i in resp.person){\r",
							"    console.log(i+ \" = \"+ resp.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}